name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build
      
    - name: Generate version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "version=pr-${{ github.event.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Render (Production)
      if: github.ref == 'refs/heads/main'
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear",
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          }'
          
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const nodemailer = require('nodemailer');
          
          const transporter = nodemailer.createTransporter({
            service: 'gmail',
            auth: {
              user: '${{ secrets.EMAIL_USER }}',
              pass: '${{ secrets.EMAIL_PASSWORD }}'
            }
          });
          
          const mailOptions = {
            from: '${{ secrets.EMAIL_USER }}',
            to: '${{ secrets.NOTIFICATION_EMAIL }}',
            subject: 'Pipeline CI/CD Failed - ${{ github.repository }}',
            text: `
              Pipeline failed for repository: ${{ github.repository }}
              Branch: ${{ github.ref }}
              Commit: ${{ github.sha }}
              Workflow: ${{ github.workflow }}
              Run ID: ${{ github.run_id }}
              
              View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `
          };
          
          await transporter.sendMail(mailOptions); 