name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: lucasnotaro/api-integracao

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Generate semantic version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "version=pr-${{ github.event.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "tag=pr-${{ github.event.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            # Versionamento semântico baseado em commits
            BASE_VERSION=$(node -p "require('./package.json').version")
            
            # Analisar commits desde a última tag para determinar tipo de mudança
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")
            
            # Contar tipos de commits
            BREAKING_CHANGES=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep -c "BREAKING CHANGE" || echo "0")
            FEATURES=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep -c "^feat:" || echo "0")
            FIXES=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD | grep -c "^fix:" || echo "0")
            
            # Extrair versão atual
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
            
            # Determinar nova versão baseada nos commits
            if [ "$BREAKING_CHANGES" -gt 0 ]; then
              # Breaking changes incrementam MAJOR
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
            elif [ "$FEATURES" -gt 0 ]; then
              # Features incrementam MINOR
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
            elif [ "$FIXES" -gt 0 ]; then
              # Fixes incrementam PATCH
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
            else
              # Se não há mudanças semânticas, incrementar PATCH
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
            fi
            
            NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
            
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              # Em main, usar versão semântica
              echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
              echo "tag=v${NEW_VERSION}" >> $GITHUB_OUTPUT
            else
              # Em develop, adicionar sufixo de desenvolvimento
              SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
              echo "version=${NEW_VERSION}-dev.${SHORT_SHA}" >> $GITHUB_OUTPUT
              echo "tag=v${NEW_VERSION}-dev.${SHORT_SHA}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create Git tag (only on main)
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          # Verificar se a tag já existe antes de criar
          if ! git tag -l | grep -q "${{ steps.version.outputs.tag }}"; then
            git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.tag }}"
            git push origin ${{ steps.version.outputs.tag }}
          else
            echo "Tag ${{ steps.version.outputs.tag }} already exists, skipping..."
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Render (Production - only from main)
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": "do_not_clear",
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
            }'
